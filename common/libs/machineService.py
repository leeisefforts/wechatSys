from application import app, dbfrom common.libs.WebHelper import getCurrentDatefrom common.libs.goods.goodsService import GoodsServicefrom common.libs.order.orderService import OrderServicefrom common.model.wechat.Machine_Weimob import Machine_Weimobfrom common.model.wechat.Machine_CardCode import Machine_CardCodefrom sqlalchemy import and_, or_import random, string, hashlib, requestsclass MachineService:    def __init__(self):        pass    def create_sign(self, pay_data):        '''        生成签名        :param pay_data:        :return:        '''        stringA = '&'.join(["{0}={1}".format(k, pay_data.get(k)) for k in pay_data])        sign = hashlib.md5(stringA.encode("utf-8")).hexdigest()        return sign    def __createcardcode__(self):        src_digits = string.digits  # string_数字        src_uppercase = ['A', 'B', 'C', 'D', 'E', 'F']  # string_大写字母        for i in range(8):            # 随机生成数字、大写字母、小写字母的组成个数（可根据实际需要进行更改）            digits_num = random.randint(1, 4)            uppercase_num = random.randint(1, 8 - digits_num)            # 生成字符串            password = random.sample(src_digits, digits_num) + random.sample(src_uppercase,                                                                             uppercase_num)            # 打乱字符串            random.shuffle(password)            # 列表转字符串            new_password = ''.join(password)            return new_password    def __saveorderinfo__(self, order_info):        cardcode = self.__createcardcode__()        rule = and_(Machine_Weimob.orderStatus == 2, Machine_Weimob.orderNo == order_info['orderNo'])        cardcode_isVaild = Machine_Weimob.query.filter(rule).first()        if cardcode_isVaild:            return False        while cardcode_isVaild:            cardcode = self.__createcardcode__()            cardcode_isVaild = Machine_Weimob.query.filter_by(cardcode=cardcode).first()        for item in order_info['itemList']:            machine = Machine_Weimob()            machine.goodsId = item["goodsId"] if 'goodsId' in item else ''            machine.goods_name = item["goodsTitle"] if 'goodsTitle' in item else ''            machine.goodscode = item['goodsCode'] if 'goodsCode' in item else ''            machine.totalAmount = item['totalAmount'] if 'totalAmount' in item else ''            machine.orderNo = order_info['orderNo'] if 'orderNo' in order_info else ''            machine.createtime = getCurrentDate()            machine.orderStatus = order_info['orderStatus'] if 'orderStatus' in order_info else ''            machine.pid = order_info['merchantInfo']['pid']            machine.merchantTitle = order_info['merchantInfo']['merchantTitle']            machine.processStoreId = order_info['merchantInfo']['processStoreId']            machine.processStoreTitle = order_info['merchantInfo']['processStoreTitle']            machine.selfPickupSiteId = order_info['merchantInfo']['selfPickupSiteId']            machine.storeId = order_info['merchantInfo']['storeId']            machine.storeTitle = order_info['merchantInfo']['storeTitle']            machine.wid = order_info['buyerInfo']['wid']            machine.userNickname = order_info['buyerInfo']['userNickname']            machine.deliveryNo = order_info['deliveryDetail']['selfPickupDetail']['logisticsOrderList'][0]['deliveryNo']            machine.cardcode = machine.deliveryNo[0: 8]            machine.status = 0            db.session.add(machine)            db.session.commit()        return True    def __validcardcode__(self, order_id, cardcode, pid, vmc, mac):        pay_data = {            'ID': order_id,            'PID': pid,            'VMC': vmc,            'CODE': cardcode,            'USER': 'yipao'        }        sign = self.create_sign(pay_data=pay_data)        if sign != mac:            return False        machine_cardcode = Machine_CardCode()        rule = and_(Machine_Weimob.cardcode == cardcode, Machine_Weimob.orderStatus in (1, 2))        list = Machine_Weimob.query.filter(rule).all()        if list:            item = list[0]            if item and item.status == 1:                return False            #     url = 'http://39.104.57.0:8079/FASTCODE'            #     data = {            #         'ID': order_id,            #         'USERNAME': 'yipao',            #         'PASSWORD': '974AF8EDFD089078',            #         'VMC': vmc,            #         'PTYPE': 'FASTCODE',            #         'PID': pid,            #         'FASTCODE': 555            #     }            #     for item in list:            #         data['PID'] = item.pid            #         sign = self.create_sign(pay_data=data)            #         url += '?ID={0}&PTYPE=FASTCODE&PID={1}&VMC={2}&FASTCODE={3}&USERNAME={4}&MAC={5}'.format(            #             order_id, item.pid, vmc, 555, data['USERNAME'], sign)            #         r = requests.post(url)            return True        return False    def product_make(self, pay_data):        machine_cardcode = Machine_CardCode()        rule = and_(Machine_Weimob.cardcode == pay_data['CODE'], Machine_Weimob.orderStatus == 2)        list = Machine_Weimob.query.filter(rule).all()        if list:            url = 'http://39.104.57.0:8079/FASTCODE'            data = {                'ID': pay_data['ID'],                'USERNAME': 'yipao',                'PASSWORD': '974AF8EDFD089078',                'VMC': pay_data['VMC'],                'PTYPE': 'FASTCODE',                'PID': '',                'FASTCODE': 555            }            for item in list:                data['PID'] = item.goodscode                sign = self.create_sign(pay_data=data)                url += '?ID={0}&PTYPE=FASTCODE&PID={1}&VMC={2}&FASTCODE={3}&USERNAME={4}&MAC={5}'.format(                    pay_data['ID'], item.goodscode, pay_data['VMC'], 555, data['USERNAME'], sign)                r = requests.post(url)                item.status = 1                db.session.add(item)                db.session.commit()                if r.status_code == 200:                    orderService = OrderService()                    orderService.__chargeOff__(item, pay_data['CODE'])                    return True